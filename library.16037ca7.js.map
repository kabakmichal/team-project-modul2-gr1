{"mappings":"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","sources":["src/js/modal-team.js","src/js/login-modal.js","src/js/modalSet.js","src/js/Queue.js","src/js/modal.js","src/js/library.js"],"sourcesContent":["(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[data-modal-team-open]'),\n    closeModalBtn: document.querySelector('[data-modal-team-close]'),\n    modal: document.querySelector('[data-modal-team]'),\n  };\n\nrefs.openModalBtn.addEventListener('click', toggleModal);\nrefs.closeModalBtn.addEventListener('click', toggleModal);\n\ndocument.addEventListener('keydown', e => {\n  if (e.code === 'Escape') {\n    refs.modal.classList.add('is-hidden');\n  }\n});\n  \n//   document.addEventListener('click', event => {\n//   if (event.target.matches('[data-modal-team-close]') || !event.target.closest('[data-modal-team]')) {\n//     refs.modal.classList.add('is-hidden');\n//   }\n// });\n  \n  \n  function toggleModal() {\n    refs.modal.classList.toggle('is-hidden');\n  }\n})();\n","\n\nexport default\n(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[login-open]'),\n    closeModalBtn: document.querySelector('[login-close]'),\n    modal: document.querySelector('[login-modal]'),\n  };\n\n    refs.openModalBtn.addEventListener('click', toggleModal);\n    refs.closeModalBtn.addEventListener('click', toggleModal);\n\n  function toggleModal() {\n    refs.modal.classList.toggle('is-hidden');\n  }\n    })();\n\n\n","const movieModalBox = document.querySelector('.modal__movie-box');\n\nlet modalSet = async movie => {\n  movieModalBox.innerHTML = '';\n  console.log(movie);\n  const {\n    imgAlt,\n    poster_path,\n    title,\n    name,\n    genres,\n    vote_average,\n    vote_count,\n    popularity,\n    overview,\n  } = movie;\n  let imgSrc = `https://image.tmdb.org/t/p/w300${poster_path}`;\n  if (poster_path === null) {\n    imgSrc = new URL('https://picsum.photos/id/237/274/398');\n  }\n  let markup = `<div class=\"modal__movie-box-separation\">\n                <div class=\"modal__movie-box-photo\"><img class=\"modal__movie-image\" src=\"${imgSrc}\"  alt=\"Poster of: ${imgAlt}\"\n                        loading=\"lazy\"></div>\n                <div class=\"modal__movie-box-info\">\n                    <h2 class=\"modal__movie-box-title\">${title || name}</h2>\n                    <ul class=\"modal__movie-box-details\">\n                        <li class=\"modal__movie-details-li\"><span class=\"modal__movie-details-label\">Vote /Votes </span><span><span class=\"modal__movie-details-vote\">${Number(\n                                  vote_average\n                                ).toFixed(1)}</span> / ${vote_count}</span></span></li>\n                        </li>\n                        <li class=\"modal__movie-details-li\"><span class=\"modal__movie-details-label\">Popularity</span><span\n                                class=\"modal__movie-details-value\">${Number(\n                                  popularity\n                                ).toFixed(0)}</span></li>\n                        <li class=\"modal__movie-details-li\"><span class=\" modal__movie-details-label\">Original Title</span><span\n                                class=\"modal__movie-details-value modal__movie-details-title\">${title || name }</span></li>\n                        <li class=\"modal__movie-details-li\"><span class=\" modal__movie-details-label\">Genre</span><span\n                                class=\"modal__movie-details-value\">${genres\n                                  .map(genre => genre.name)\n                                  .join(', ')}</span></li>\n                        </li>\n                    </ul>\n                    <h3 class=\"modal__movie-about-label\">About</h3>\n                    <p class=\"modal__movie-about-text\">${overview}</p>\n                    <div class=\"modal__movie-btns--wrapper\">\n                        <button type=\"button\" class=\"modal__movie-btns modal__movie-btns--watch\" data-name=\"watched\"\n                            >Add to watched</button>\n                        <button type=\"button\" class=\"modal__movie-btns modal__movie-btns-queue\" data-name=\"queue\">Add\n                            to queue</button>\n                    </div>\n                </div>\n            </div>`;\n\n  return movieModalBox.insertAdjacentHTML('beforeend', markup);\n};\nexport { modalSet, movieModalBox };\n","// dodanie do watchlisty\n\nconst addToQueue = object => {\n  if (object === '') return;\n  const queueList = JSON.parse(localStorage.getItem('queue')) || [];\n  if (\n    queueList.find(\n      option =>\n        option.media_type === object.media_type && option.id === object.id\n    )\n  )\n    return;\n\n  queueList.push(object);\n  try {\n    console.log(queueList);\n    localStorage.setItem('queue', JSON.stringify(queueList));\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nconst addToWatched = object => {\n  if (object === '') return;\n  const watchedList = JSON.parse(localStorage.getItem('watched')) || [];\n  console.log(watchedList);\n  console.log('first');\n  if (\n    watchedList.find(\n      option =>\n        option.media_type === object.media_type && option.id === object.id\n    )\n  )\n    return;\n\n  watchedList.push(object);\n  try {\n    console.log(watchedList);\n    localStorage.setItem('watched', JSON.stringify(watchedList));\n  } catch (error) {\n    console.error('Set state error: ', error.message);\n  }\n};\n\nexport { addToQueue, addToWatched };\n","import { modalSet, movieModalBox } from './modalSet';\nimport { addToQueue, addToWatched } from './Queue';\n\nconst fetchOneMovie = key => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${key}?api_key=32592fc1c467ab313147df8555d6672d`\n  ).then(response => {\n    if (!response.ok) throw new Error(response.status);\n    return response.json();\n  });\n};\nconst fetchOneTV = key => {\n  return fetch(\n    `https://api.themoviedb.org/3/tv/${key}?api_key=32592fc1c467ab313147df8555d6672d`\n  ).then(response => {\n    if (!response.ok) throw new Error(response.status);\n    return response.json();\n  });\n};\n\n(() => {\n  const refs = {\n    openModalBtn: document.querySelector('[data-modal-open]'),\n    closeModalBtn: document.querySelector('[data-modal-close]'),\n    modal: document.querySelector('[data-modal]'),\n  };\n\n  // Zmienna movie przechowuje obiekt z konkretnym filmem !!!!!!!\n  let counter = 0;\n  refs.openModalBtn.addEventListener('click', async event => {\n    if (event.target.offsetParent.className !== 'movie-card') return;\n    toggleModal();\n    let movieId = event.target.offsetParent.dataset.id;\n    let movie;\n    console.log(event.target.offsetParent.dataset.type);\n    if (event.target.offsetParent.dataset.type === 'movie')\n      movie = await fetchOneMovie(movieId);\n    if (event.target.offsetParent.dataset.type === 'tv')\n      movie = await fetchOneTV(movieId);\n    await modalSet(movie);\n    refs.modal.addEventListener('click', e => {\n      // e.preventDefault();\n\n      counter += 1;\n      console.log(counter);\n      if (e.target.dataset.name === 'queue') {\n        addToQueue(movie);\n        movie = '';\n      }\n\n      if (e.target.dataset.name === 'watched') {\n        addToWatched(movie);\n        movie = '';\n      }\n    });\n  });\n\n  document.addEventListener('keydown', e => {\n    if (e.code === 'Escape') toggleModal();\n  });\n  refs.closeModalBtn.addEventListener('click', () => {\n    movieModalBox.innerHTML = '';\n    toggleModal();\n  });\n\n  function toggleModal() {\n    refs.modal.classList.toggle('is-hidden');\n  }\n})();\n","// import { movieSet } from './movieSet';\nimport './modal-team';\nimport './login-modal.js';\nimport './modal';\nimport '../sass/index.scss';\n\nconst myList = document.querySelector('.gallery');\n\nconst movieSetLibrary = async data => {\n  myList.innerHTML = '';\n\n  const markup = data\n    .map(\n      //trzeba dodać genre, ale mamy tylko genre_ids(cyfry)\n      ({\n        id,\n        media_type,\n        poster_path,\n        release_date,\n        first_air_date,\n        title,\n        name,\n        genres,\n      }) => {\n        let filmDate = release_date || first_air_date || '????';\n        if (media_type === 'person') return;\n        return `<div class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n      <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" onerror=\"this.src = 'https://picsum.photos/id/237/274/398'\";alt=\"image of movie\" loading=\"lazy\" />\n      <div class=\"movie-card__info\">\n          <p class=\"movie-card__title\">\n              <span>${title || name}</span>\n          </p>\n      <div class= \"genreDate\">\n          <p class=\"movie-card__genre\">\n              <span>${genres\n                .map(genre => genre.name)\n                .splice(0, 2)\n                .join(', ')}</span>\n          </p>\n          <p class=\"movie-card__year\">| ${filmDate.slice(0, 4)|| \"\"}\n              <span></span>\n          </p>\n      </div>\n      </div>\n  </div>\n  `;\n      }\n    )\n    .join('');\n  return myList.insertAdjacentHTML('beforeend', markup);\n};\n\nconst getQueueData = async () => {\n  try {\n    const queue = JSON.parse(localStorage.getItem('queue')) || [];\n    if (queue === null) {\n      return;\n    }\n    return queue;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getWatchedData = async () => {\n  try {\n    const watched = JSON.parse(localStorage.getItem('watched')) || [];\n    if (watched === null) {\n      return;\n    }\n    return watched;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// function findFilmByIdLs(id) {\n//     const films = [...getQueueData(), ...getWatchedData()]\n//     const film = films.find((film) => film.id == id)\n//     return film\n// }\n\nconst refs = {\n  btnWatchedHeaderEl: document.querySelector('.header-watched'),\n  btnQueueHeaderEl: document.querySelector('.header-queue'),\n};\n\n// const onWatchedBtnClick = async () => {\n//   const arrayFilms = await getWatchedData();\n//   movieSetLibrary(arrayFilms);\n// };\n\n// const onQueueBtnClick = async () => {\n//   const arrayFilms = await getQueueData();\n//   movieSetLibrary(arrayFilms);\n// };\n\nrefs.btnWatchedHeaderEl.addEventListener('click', async () => {\n  const arrayFilms = await getWatchedData();\n  movieSetLibrary(arrayFilms);\n});\nrefs.btnQueueHeaderEl.addEventListener('click', async () => {\n  const arrayFilms = await getQueueData();\n  movieSetLibrary(arrayFilms);\n});\n\n// onWatchedBtnClick();\n"],"names":["refs","openModalBtn","document","querySelector","closeModalBtn","modal","toggleModal","classList","toggle","addEventListener","e","code","add","$c3d653649d88af14$export$b367112c28a84ddd","$c3d653649d88af14$export$44ced2102caa63b","async","movie","innerHTML","console","log","imgAlt","poster_path","title","name","genres","vote_average","vote_count","popularity","overview","imgSrc","URL","markup","Number","toFixed","map","genre","join","insertAdjacentHTML","$f376a0a6b79b7a66$export$30665681cb9a2b60","object","queueList","JSON","parse","localStorage","getItem","find","option","media_type","id","push","setItem","stringify","error","message","$f376a0a6b79b7a66$export$40f3bf3a25b21bf","watchedList","counter","event","target","offsetParent","className","movieId","dataset","key","type","fetch","then","response","ok","Error","status","json","$8a7e756c566dd1ea$var$fetchOneTV","$1cafa503bc57b7a0$var$myList","$1cafa503bc57b7a0$var$movieSetLibrary","data","release_date","first_air_date","filmDate","splice","slice","$1cafa503bc57b7a0$var$refs","btnWatchedHeaderEl","btnQueueHeaderEl","arrayFilms","watched","$1cafa503bc57b7a0$var$getWatchedData","queue","$1cafa503bc57b7a0$var$getQueueData"],"version":3,"file":"library.16037ca7.js.map"}