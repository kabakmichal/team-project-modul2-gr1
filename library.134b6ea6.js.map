{"mappings":"AAqBA,IAAIA,EAEJ,MAAMC,EAAWC,UACVF,IACHA,OAzBcE,WAChB,MAAMC,QAAiBC,MACrB,yGAEIC,QAAuBD,MAC3B,sGAGIE,QAAkBH,EAASI,OAC3BC,QAAmBH,EAAeE,OASxC,MARa,IACR,IAAIE,IACL,IAAIH,EAAUI,UAAWF,EAAWE,QAAQC,KAAIC,GAAQ,CACtDA,EAAS,GACTA,MAEFC,SAEO,EAOaC,IAEjBd,EAAce,QAAO,CAACC,EAAKC,KACzB,IACFD,EACH,CAACC,EAAMC,IAAKD,EAAME,QAEnB,KC5BCC,EAASC,SAASC,cAAc,YAEhCC,EAAkBrB,MAAMsB,IAC5B,MAAMC,QAAkBxB,IAElByB,EAASF,EACZb,KAEC,EACEO,GAAAS,EAAEC,WACFA,EAAUC,YACVA,EAAWC,aACXA,EAAYC,eACZA,EAAcC,MACdA,EAAKb,KACLA,EAAIT,OACJA,MAEA,IAAIuB,EAAWH,GAAgBC,GAAkB,OACjD,GAAmB,WAAfH,EACJ,MAAO,oCAAoCD,iBAAkBC,gFACKC,6MAGpDG,GAASb,0HAITT,EACLC,KAAIO,GAAMO,EAAUP,KACpBgB,OAAO,EAAG,GACVC,KAAK,yEAEoBF,EAASG,MAAM,EAAG,2FAMzD,IAGED,KAAK,IACR,OAAOf,EAAOiB,mBAAmB,YAAaX,EAAO,EAiCjDY,EAAO,CACXC,mBAAoBlB,SAASC,cAAc,mBAC3CkB,iBAAkBnB,SAASC,cAAc,kBAa3CgB,EAAKC,mBAAmBE,iBAAiB,SAASvC,UAChD,MAAMwC,OAlCexC,WACrB,IACE,MAAMyC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GAC/D,GAAgB,OAAZJ,EACF,OAEF,OAAOA,C,CACP,MAAOK,GACPC,QAAQC,IAAIF,E,GA0BWG,GACzB5B,EAAgBmB,EAAW,IAE7BJ,EAAKE,iBAAiBC,iBAAiB,SAASvC,UAC9C,MAAMwC,OAlDaxC,WACnB,IACE,MAAMkD,EAAQR,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAC3D,GAAc,OAAVK,EACF,OAEF,OAAOA,C,CACP,MAAOJ,GACPC,QAAQC,IAAIF,E,GA0CWK,GACzB9B,EAAgBmB,EAAW,IAG7BY","sources":["src/js/getGenre.js","src/js/library.js"],"sourcesContent":["const genreList = async () => {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?api_key=32592fc1c467ab313147df8555d6672d&language=en-US'\n  );\n  const secondResponse = await fetch(\n    'https://api.themoviedb.org/3/genre/tv/list?api_key=32592fc1c467ab313147df8555d6672d&language=en-US'\n  );\n\n  const firstData = await response.json();\n  const secondData = await secondResponse.json();\n  const data = [\n    ...new Map(\n      [...firstData.genres, ...secondData.genres].map(item => [\n        item['id'],\n        item,\n      ])\n    ).values(),\n  ];\n  return data;\n};\n\nlet genreResponse;\n\nconst getGenre = async () => {\n  if (!genreResponse) {\n    genreResponse = await genreList();\n  }\n  return genreResponse.reduce((acc, genre) => {\n    return {\n      ...acc,\n      [genre.id]: genre.name,\n    };\n  }, {});\n};\n\nexport { getGenre };\n","// import { movieSet } from './movieSet';\nimport { getGenre } from './getGenre';\nimport '../sass/index.scss';\n\nconst myList = document.querySelector('.my-list');\n\nconst movieSetLibrary = async data => {\n  const genreDict = await getGenre();\n\n  const markup = data\n    .map(\n      //trzeba dodaÄ‡ genre, ale mamy tylko genre_ids(cyfry)\n      ({\n        id,\n        media_type,\n        poster_path,\n        release_date,\n        first_air_date,\n        title,\n        name,\n        genres,\n      }) => {\n        let filmDate = release_date || first_air_date || '????';\n        if (media_type === 'person') return;\n        return `<div class=\"movie-card\" data-id=\"${id}\" data-type=\"${media_type}\">\n      <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" onerror=\"this.src = 'https://picsum.photos/id/237/274/398'\";alt=\"image of movie\" loading=\"lazy\" />\n      <div class=\"movie-card__info\">\n          <p class=\"movie-card__title\">\n              <span>${title || name}</span>\n          </p>\n      <div class= \"genreDate\">\n          <p class=\"movie-card__genre\">\n              <span>${genres\n                .map(id => genreDict[id])\n                .splice(0, 2)\n                .join(', ')}</span>\n          </p>\n          <p class=\"movie-card__year\">| ${filmDate.slice(0, 4)}\n              <span></span>\n          </p>\n      </div>\n      </div>\n  </div>\n  `;\n      }\n    )\n    .join('');\n  return myList.insertAdjacentHTML('beforeend', markup);\n};\n\nconst getQueueData = async () => {\n  try {\n    const queue = JSON.parse(localStorage.getItem('queue')) || [];\n    if (queue === null) {\n      return;\n    }\n    return queue;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getWatchedData = async () => {\n  try {\n    const watched = JSON.parse(localStorage.getItem('watched')) || [];\n    if (watched === null) {\n      return;\n    }\n    return watched;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// function findFilmByIdLs(id) {\n//     const films = [...getQueueData(), ...getWatchedData()]\n//     const film = films.find((film) => film.id == id)\n//     return film\n// }\n\nconst refs = {\n  btnWatchedHeaderEl: document.querySelector('.header-watched'),\n  btnQueueHeaderEl: document.querySelector('.header-queue'),\n};\n\n// const onWatchedBtnClick = async () => {\n//   const arrayFilms = await getWatchedData();\n//   movieSetLibrary(arrayFilms);\n// };\n\n// const onQueueBtnClick = async () => {\n//   const arrayFilms = await getQueueData();\n//   movieSetLibrary(arrayFilms);\n// };\n\nrefs.btnWatchedHeaderEl.addEventListener('click', async () => {\n  const arrayFilms = await getWatchedData();\n  movieSetLibrary(arrayFilms);\n});\nrefs.btnQueueHeaderEl.addEventListener('click', async () => {\n  const arrayFilms = await getQueueData();\n  movieSetLibrary(arrayFilms);\n});\n\nonWatchedBtnClick();\n"],"names":["$80f4db6e90db0ac9$var$genreResponse","$80f4db6e90db0ac9$export$11ff5302ebb1cd30","async","response","fetch","secondResponse","firstData","json","secondData","Map","genres","map","item","values","$80f4db6e90db0ac9$var$genreList","reduce","acc","genre","id","name","$1cafa503bc57b7a0$var$myList","document","querySelector","$1cafa503bc57b7a0$var$movieSetLibrary","data","genreDict","markup","id1","media_type","poster_path","release_date","first_air_date","title","filmDate","splice","join","slice","insertAdjacentHTML","$1cafa503bc57b7a0$var$refs","btnWatchedHeaderEl","btnQueueHeaderEl","addEventListener","arrayFilms","watched","JSON","parse","localStorage","getItem","error","console","log","$1cafa503bc57b7a0$var$getWatchedData","queue","$1cafa503bc57b7a0$var$getQueueData","onWatchedBtnClick"],"version":3,"file":"library.134b6ea6.js.map"}