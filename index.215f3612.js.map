{"mappings":"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","sources":["src/js/getGenre.js","src/js/spinner.js","src/js/fetch.js","src/js/movieSet.js","src/index.js"],"sourcesContent":["const genreList = async () => {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?api_key=32592fc1c467ab313147df8555d6672d&language=en-US'\n  );\n  const secondResponse = await fetch(\n    'https://api.themoviedb.org/3/genre/tv/list?api_key=32592fc1c467ab313147df8555d6672d&language=en-US'\n  );\n\n  const firstData = await response.json();\n  const secondData = await secondResponse.json();\n  const data = [\n    ...new Map(\n      [...firstData.genres, ...secondData.genres].map(item => [\n        item['id'],\n        item,\n      ])\n    ).values(),\n  ];\n  return data;\n};\n\nlet genreResponse;\n\nconst getGenre = async () => {\n  if (!genreResponse) {\n    genreResponse = await genreList();\n  }\n  return genreResponse.reduce((acc, genre) => {\n    return {\n      ...acc,\n      [genre.id]: genre.name,\n    };\n  }, {});\n};\n\nexport { getGenre };\n","import { gallery } from './fetch.js'\nimport {paginationBtns } from './fetch.js'\n\nconst spinner = document.querySelector(\".input-notification\");\n\nexport function spinnerHidden() {\nspinner.style.visibility = 'hidden';\nspinner.style.display = 'none';\npaginationBtns.style.visibility = \"visible\";\npaginationBtns.style.display = \"flex\";\n}\n\nexport function spinnerVisible() {\nspinner.style.visibility = 'visible';\nspinner.style.display = 'block';\npaginationBtns.style.visibility = \"hidden\";\ngallery.innerHTML = '';\n}","import { getGenre } from './getGenre';\nimport { spinnerHidden } from \"./spinner\";\nimport { spinnerVisible } from \"./spinner\";\n\nconst inputBtn = document.querySelector('.search-form__btn');\nconst inputTitle = document.querySelector('.search-form__input');\nexport const gallery = document.querySelector('.gallery');\nexport const paginationBtns = document.querySelector('.pagination_btns');\n\nconst API_KEY = '?api_key=32592fc1c467ab313147df8555d6672d';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst MAIN_PAGE_URL = '/trending/all/day';\n// const GENRE_URL = '/genre/movie/list';\nlet page = 1;\n\nconst fetchOnStart = async () => {\n  const response = await fetch(\n    `${BASE_URL}${MAIN_PAGE_URL}${API_KEY}&page=${page}`\n  );\n  const data = await response.json();\n  console.log(data);\n  return data;\n};\n\nconst fetchInput = async title => {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=32592fc1c467ab313147df8555d6672d&query=${title}&page=${page}&include_adult=false`\n  );\n  const responseObject = await response.json();\n\n  return responseObject;\n};\n\n//w <p class=\"movie-card__year\">${release_date || first_air_date} nie działa mi slice popatrzę jeszcze dlaczego\n\nlet renderMovies = async data => {\n  const genreDict = await getGenre();\n  gallery.innerHTML = '';\n  const markup = data\n    .map(({ poster_path, release_date, first_air_date, title,name, genre_ids }) => {\n      return `<div class=\"movie-card\">\n  <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${\n          title || name}\" loading=\"lazy\" />\n  <div class=\"movie-card__info\">\n      <p class=\"movie-card__title\">\n          <span>${title || name}</span>\n      </p>\n  <div class= \"genreDate\">\n      <p class=\"movie-card__genre\">\n          <span>${genre_ids.map(id => genreDict[id]).join(',')}</span>\n      </p>\n      <p class=\"movie-card__year\">${release_date || first_air_date} \n          <span></span>\n      </p>\n  </div>\n  </div>\n</div>\n`;\n    })\n    .join('');\n  return gallery.insertAdjacentHTML('beforeend', markup);\n};\n\nconst pagination = async (totalPages, title) => {\n  // paginationBtns = '';\n  if (totalPages >= 1) {\n    for (let i = 1; i <= totalPages; i++) {\n      let btn = document.createElement('button');\n      btn.innerHTML = i;\n\n      paginationBtns.appendChild(btn);\n    }\n  }\n};\n\ninputBtn.addEventListener('click', async event => {\n  event.preventDefault();\n\n  const title = inputTitle.value.trim();\n  console.log(title);\n\n  try {\n    const array = await fetchInput(title);\n    console.log(array);\n    const arrayMovies = [];\n    array.results.forEach(async movie => {\n      arrayMovies.push(movie);\n    });\n\n     if (!array.total_results) {\n      spinnerVisible();\n      \n    } else {\n      spinnerHidden();\n    }\n\n    renderMovies(arrayMovies);\n\n    const totalPages = await array.total_pages;\n    const totalMovies = await array.total_results;\n\n    console.log(`Total pages: ${totalPages}`);\n    console.log(`Total results: ${totalMovies}`);\n\n    pagination(totalPages, title);\n\n    // arrayMovies.forEach(async movie => {\n    //   console.log(movie);\n    // });\n  } catch (error) {\n    console.error(error);\n  }\n});\n\nexport { fetchOnStart };\n","import { getGenre } from './getGenre';\nconst gallery = document.querySelector('.gallery');\n\nlet movieSet = async data => {\n  const genreDict = await getGenre();\n  const markup = data\n    .map(\n      //trzeba dodać genre, ale mamy tylko genre_ids(cyfry)\n      ({ poster_path, release_date,first_air_date, title, name, genre_ids }) => {\n        return `<div class=\"movie-card\">\n    <img class=\"movie-card__img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\" alt=\"${\n          title || name}\" loading=\"lazy\" />\n    <div class=\"movie-card__info\">\n        <p class=\"movie-card__title\">\n            <span>${title || name}</span>\n        </p>\n    <div class= \"genreDate\">\n        <p class=\"movie-card__genre\">\n            <span>${genre_ids.map(id => genreDict[id]).join(', ')}</span>\n        </p>\n        <p class=\"movie-card__year\">${(\n          release_date ||\n          first_air_date).slice(0, 4)}\n            <span></span>\n        </p>\n    </div>\n    </div>\n</div>\n`;\n      }\n    )\n    .join('');\n  return gallery.insertAdjacentHTML('beforeend', markup);\n};\nexport { movieSet };\n","import './sass/index.scss';\n\nimport { fetchOnStart } from './js/fetch';\nimport { movieSet } from './js/movieSet';\n\nfetchOnStart()\n  .then(data => {\n    return movieSet(data.results);\n  })\n  .catch(err => {\n    return console.error(err);\n  });\n"],"names":["$80f4db6e90db0ac9$var$genreResponse","$80f4db6e90db0ac9$export$11ff5302ebb1cd30","async","response","fetch","secondResponse","firstData","json","secondData","Map","genres","map","item","values","$80f4db6e90db0ac9$var$genreList","reduce","acc","genre","id","name","$00cfbbdd8a53f936$var$spinner","document","querySelector","$924b66e829bc1184$var$inputBtn","$924b66e829bc1184$var$inputTitle","$924b66e829bc1184$export$b21c1b4271bdbe93","$924b66e829bc1184$export$692c4d7b6a465afa","addEventListener","event","preventDefault","title","value","trim","console","log","array","$924b66e829bc1184$var$fetchInput","arrayMovies","results","forEach","movie","push","total_results","style","visibility","display","innerHTML","data","genreDict","markup","poster_path","release_date","first_air_date","genre_ids","join","insertAdjacentHTML","$924b66e829bc1184$var$renderMovies","totalPages","total_pages","totalMovies","i","btn","createElement","appendChild","$924b66e829bc1184$var$pagination","error","$483434e96dfe2a08$var$gallery","$483434e96dfe2a08$export$daf0ce4809c70dc","slice","then","catch","err"],"version":3,"file":"index.215f3612.js.map"}